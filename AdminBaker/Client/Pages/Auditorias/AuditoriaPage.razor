@page "/auditorias"
@attribute [Authorize(Roles = Constantes.RolAdministrador)]
@inject IPedidoProxy PedidoProxy
@inject IProductoProxy ProductoProxy
@inject IMateriaPrimaProxy MateriaPrimaProxy
@inject IVendedorProxy VendedorProxy
@inject IClienteProxy ClienteProxy
@inject IToastService ToastService

<h1 class="titulo">Auditorias</h1>


<div>
    <hr/>
    <ul class="nav nav-tabs" id="auditoriasTab" role="tablist">
        <li class="nav-item" role="presentation">
            <button class="nav-link active" id="pedidos-tab"
                    data-bs-toggle="tab" data-bs-target="#pedidos" type="button" role="tab"
                    aria-controls="pedidos" aria-selected="True" @onclick="() => CambiarVista(0)">
                Pedidos
            </button>
        </li>
        <li class="nav-item" role="presentation">
            <button class="nav-link" id="productos-tab"
                    data-bs-toggle="tab" data-bs-target="#productos" type="button" role="tab"
                    aria-controls="productos" aria-selected="false" @onclick="() => CambiarVista(1)">
                Productos
            </button>
        </li>
        <li class="nav-item" role="presentation">
            <button class="nav-link" id="clientes-tab"
                    data-bs-toggle="tab" data-bs-target="#clientes" type="button" role="tab"
                    aria-controls="clientes" aria-selected="false" @onclick="() => CambiarVista(2)">
                Clientes
            </button>
        </li>
        <li class="nav-item" role="presentation">
            <button class="nav-link" id="vendedores-tab"
                    data-bs-toggle="tab" data-bs-target="#vendedores" type="button" role="tab"
                    aria-controls="vendedores" aria-selected="false" @onclick="() => CambiarVista(3)">
                Vendedores
            </button>
        </li>
        <li class="nav-item" role="presentation">
            <button class="nav-link" id="materiaprimas-tab"
                    data-bs-toggle="tab" data-bs-target="#materiasprimas" type="button" role="tab"
                    aria-controls="materiasprimas" aria-selected="false" @onclick="() => CambiarVista(4)">
                Materias Primas
            </button>
        </li>
    </ul>
    <div class="tab-content" id="auditoriasTabContent">
        <div class="tab-pane fade show active" id="pedidos" role="tabpanel" aria-labelledby="pedidos-tab">
            <PedidoAuditoria Pedidos="Pedidos"/>
        </div>
        <div class="tab-pane fade" id="productos" role="tabpanel" aria-labelledby="productos-tab">
            <ProductoAuditoria Lista="Productos"/>
        </div>
        <div class="tab-pane fade" id="materiasprimas" role="tabpanel" aria-labelledby="materiaprimas-tab">
            <MateriaPrimaAuditoria Lista="MateriasPrimas"/>
        </div>
        <div class="tab-pane fade" id="vendedores" role="tabpanel" aria-labelledby="vendedores-tab">
            <VendedorAuditoria Lista="Vendedores"/>
        </div>
        <div class="tab-pane fade" id="clientes" role="tabpanel" aria-labelledby="clientes-tab">
            <ClienteAuditoria Lista="Clientes"/>
        </div>
    </div>
</div>

@code {

    private bool IsLoading { get; set; }

    private ICollection<PedidoAuditoriaDto>? Pedidos { get; set; }
    private ICollection<ProductoAuditoriaDto>? Productos { get; set; }
    private ICollection<MateriaPrimaAuditoriaDto>? MateriasPrimas { get; set; }
    private ICollection<VendedorAuditoriaDto>? Vendedores { get; set; }
    private ICollection<ClienteAuditoriaDto>? Clientes { get; set; }

    private async Task CambiarVista(int index)
    {
        try
        {
            IsLoading = true;
            switch (index)
            {
                case 0:
                    Pedidos = await PedidoProxy.ListAuditAsync();
                    break;
                case 1:
                    Productos = await ProductoProxy.ListAuditAsync();
                    break;
                case 2:
                    Clientes = await ClienteProxy.ListAuditAsync();
                    break;
                case 3:
                    Vendedores = await VendedorProxy.ListAuditAsync();
                    break;
                case 4:
                    MateriasPrimas = await MateriaPrimaProxy.ListAuditAsync();
                    break;
            }
        }
        catch (Exception ex)
        {
            ToastService.ShowError(ex.Message);
        }
        finally
        {
            IsLoading = false;
        }
    }

    protected override async Task OnInitializedAsync()
    {
        await CambiarVista(0);
    }


}