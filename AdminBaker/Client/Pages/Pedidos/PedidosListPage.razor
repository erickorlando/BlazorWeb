@page "/pedidos/list"
@inject IPedidoProxy PedidoProxy
@inject IToastService ToastService
@attribute [Authorize(Roles = $"{Constantes.RolAdministrador},{Constantes.RolVendedor}")]

<h1 class="titulo">Lista de Pedidos</h1>
<div class="container-xxl container-fluid container-md espaciado">
    <div class="row align-items-center mb-3 justify-content-start">
        <div class="col-3">
            <div class="form-floating">
                <input type="date" @bind-value="FechaInicio"
                       max="@DateTime.Today.ToString(Constantes.FormatoFecha)" id="FechaInicio" class="form-control" />
                <label class="form-label" for="FechaInicio">Fecha Inicio</label>
            </div>
        </div>
        <div class="col-3">
            <div class="form-floating">
                <input type="date" @bind-value="FechaFin" id="FechaFin"
                       max="@DateTime.Today.ToString(Constantes.FormatoFecha)"
                       class="form-control" />
                <label class="form-label" for="FechaFin">Fecha Fin</label>
            </div>
        </div>
        <div class="col-3">
            <div class="form-floating">
                <input type="text" @bind-value="Filter" id="Filtro"
                       class="form-control" />
                <label class="form-label" for="Filtro">Filtro</label>
            </div>
        </div>

        <div class="col-auto">
            <button class="btn btn-primary"><i class="fa fa-search me-1" @onclick="LoadData"></i>Listar</button>
        </div>
    </div>
    <div class="row justify-content-between">
        <div class="col-lg-12 col-md-12">
            <PedidoList ListaPedidos="ListaPedidos"
                        OnCambiarEstadoClick="CambiarPedido"
                        OnCancelarPedidoClick="CancelarPedido"
                        OnTomarPedidoClick="TomarPedido" />
        </div>
    </div>

    <LoadingComponent IsLoading="IsLoading" />
</div>

@code {

    public DateTime FechaInicio { get; set; }
    public DateTime FechaFin { get; set; }
    public string? Filter { get; set; }
    public bool IsLoading { get; set; }

    public ICollection<PedidoDto>? ListaPedidos { get; set; }

    protected override async Task OnInitializedAsync()
    {
        FechaInicio = DateTime.Today.AddDays(-14);
        FechaFin = DateTime.Today;
        await LoadData();
    }

    private async Task LoadData()
    {
        IsLoading = true;
        ListaPedidos = await PedidoProxy.ListAsync(FechaInicio, FechaFin, Filter);
        IsLoading = false;
    }

    private async Task TomarPedido(int id)
    {
        try
        {
            IsLoading = true;
            await PedidoProxy.TakeAsync(id);
            await LoadData();
        }
        catch (Exception ex)
        {
            ToastService.ShowError(ex.Message);
        }
        finally
        {
            IsLoading = false;
        }

    }

    private async Task CancelarPedido(int id)
    {
        try
        {
            IsLoading = true;
            await PedidoProxy.CancelAsync(id);
            await LoadData();
        }
        catch (Exception ex)
        {
            ToastService.ShowError(ex.Message);
        }
        finally
        {
            IsLoading = false;
        }
    }

    private async Task CambiarPedido(PedidoDto item)
    {
        try
        {
            IsLoading = true;
            await PedidoProxy.ChangeStatusAsync(item.Id, item.EstadoPedido);
            await LoadData();
        }
        catch (Exception ex)
        {
            ToastService.ShowError(ex.Message);
        }
        finally
        {
            IsLoading = false;
        }
    }

}